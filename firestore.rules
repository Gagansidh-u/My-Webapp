
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for the 'orders' collection
    match /orders/{orderId} {
      // Allow authenticated users to create orders for themselves
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow authenticated users to read their own orders
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Allow admin to update order status
      allow update: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
      // Disallow all deletes
      allow delete: if false;
    }
    
    // Rules for the 'admins' collection (example, adjust as needed)
    match /admins/{adminId} {
        // Only allow reads for other admins
        allow read: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
        // Disallow public writes
        allow write: if false;
    }

    // Rules for the 'contacts' collection
    match /contacts/{contactId} {
        // Allow anyone to create (submit a contact form)
        allow create: if true;
        // Allow authenticated user to read their own messages
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        // Allow admins to read, update status, and delete
        allow read, update, delete: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for the 'blog_images' collection
    match /blog_images/{slug} {
      // Allow anyone to read an image URL
      allow read: if true;
      // Allow anyone to write (create/update) an image URL
      allow write: if true;
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
