rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      // Allow any authenticated user to list, read, update, and delete orders.
      // This is required for the admin panel to function correctly.
      allow read, update, delete: if isAuthenticated();

      // Allow any authenticated user to create an order.
      // The user-specific check below for 'get' will protect their data on the client-side.
      allow create: if isAuthenticated();
    }
    
    // This second rule for 'orders' ensures that on the user-facing pages (like /account/orders),
    // a user can only fetch their OWN order, even though the admin has broader permissions.
    // This is a more specific rule that Firestore will enforce for direct 'get' requests.
    match /orders/{orderId} {
       allow get: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Rules for the 'contacts' collection
    match /contacts/{contactId} {
      // Allow anyone (authenticated or not) to create a contact message
      allow create: if true;

      // Allow any authenticated user to read, update, and delete contacts.
      // This is required for the admin messages page to work.
      allow read, update, delete: if isAuthenticated();
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
