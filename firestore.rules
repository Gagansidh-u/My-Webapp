
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserOwner(userId) {
      return request.auth.uid == userId;
    }

    // Admins have special access
    function isAdmin() {
      // For simplicity, we assume an admin's UID is known or stored elsewhere.
      // In a real app, you'd likely check a 'roles' field on the user document.
      // THIS IS A PLACEHOLDER - A real app would have a more robust admin check.
      return request.auth.uid in get(/databases/$(database)/documents/admins).data.uids;
    }

    // Orders collection rules
    match /orders/{orderId} {
      // Users can create their own orders.
      allow create: if isUserAuthenticated() && isUserOwner(request.resource.data.userId);

      // Users can only read their own orders. Admins can read any order.
      allow read: if (isUserAuthenticated() && isUserOwner(resource.data.userId)) || isAdmin();

      // Only admins can update the status of an order.
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['status']);

      // No one can delete orders for data integrity.
      allow delete: if false;
    }

    // Contacts collection rules
    match /contacts/{contactId} {
      // Anyone can create a contact message.
      allow create: if true;

      // Only admins can read contact messages.
      allow read: if isAdmin();

      // Only admins can update the status of a message.
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['status']);

      // No one can delete contact messages.
      allow delete: if false;
    }
    
    // Admins list - Only readable by admins themselves to check for existence.
    match /admins/{adminList} {
        allow read: if isAdmin();
        allow write: if false; // Should be managed manually or via a secure function
    }

  }
}
